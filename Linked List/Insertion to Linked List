
#Use Linked List
def constructLL(arr: [int]) -> Node:
    # Write your code here
    y=Node(arr[0])
    p=y
    for i in range(1,len(arr)):
        y.next=Node(arr[i])
        y=y.next
    return p    
  #Insertion at head:
class Node:
    def __init__(self, data=0, next=None):
        self.data = data
        self.next = next


# Do not change code above.


def insertAtFirst(list: Node, newValue: int) -> Node:
    x=Node(newValue)
    x.next=list
    list=x
    return list
#Insetion at tail:
def insertAtEnd(head: Optional[Node], k: int) -> Node:
    p=head
    if head==None:
        head=Node(k)
        return head
    while(p.next!=None):
        p=p.next
    p.next=Node(k)   
    return head 
#Insertion at any position:
def insert(head, n, pos, val):
    if head==None:
        head=Node(val)
        return head
    elif pos==0:
        y=Node(val)
        y.next=head
        head=y
        return head
    elif pos==n:
        p=head
        while(p.next!=None):
            p=p.next
        p.next=Node(val)
        return head
    else:
        p=head
        count=0
        while(count!=pos-1):
            p=p.next
            count+=1
        x=Node(val)
        x.next=p.next
        p.next=x
        return head        

#Insertion before value:
def insertBeforeValue(head: Optional[Node], x: int, val: int) -> Node:
    if head==None:
        head=Node(x)
        return head
    if head.data==val:
        y=Node(x)
        y.next=head
        head=y
        return head    
    p=head
    while(p.next.data!=val):
        p=p.next
    y=Node(x)
    y.next=p.next
    p.next=y
    return head       

