1)Find missing digit
Brute force:T->O(nlogn+N) S->O(1)
def missingNumber(a : List[int], N : int) -> int:
    a.sort()
    for i in range(1,N):
        if a[i-1]!=i:
            return i
    return N 
Better:Hashing dict return no.whose frequency is zero
Optimal:o(n) for sum
def missingNumber(a : List[int], N : int) -> int:
    s=int(N*(N+1)/2)
    return s-sum(a) 
Optimal 2:xor approach(xor is better as sum if a large number exceed limit (long needs to be used)not the case in python)
def missingNumber(a : List[int], N : int) -> int:
    xor=0
    xor1=0
    for i in range(N-1):
        xor=xor^a[i]
        xor1=xor1^(i+1)
    xor1=xor1^N
    return xor1^xor  

2)Find number of consecutive 1s

def consecutiveOnes(arr: List[int]) -> int:
    count=0
    maxi=-float('inf')
    for i in range(len(arr)):
        if arr[i]==1:
            count+=1
        elif arr[i]==0:
            count=0 
        maxi=max(count,maxi)       
    return maxi 

3)Return Single element
a)Brute Force 0(n) time and space
def getSingleElement(arr : List[int]) -> int:
    k={}
    for i in arr:
        k[i]=k.get(i,0)+1
    for i,freq in k.items():
        if freq==1:
            return i    
b)Better o(n) and o(1)
def getSingleElement(arr : List[int]) -> int:
    xor=0
    for i in arr:
        xor=xor^i
    return xor 
c)Optimal:o(logn) and o(1)
Binary search approach.
observe index
odd even ->eliminate right
even odd ->eliminate left
def getSingleElement(arr : List[int]) -> int:
    n=len(arr)
    if len(arr)==1:
        return arr[0]
    if arr[0]!=arr[1]:
        return arr[0]
    if arr[n-1]!=arr[n-2]:
        return arr[n-1]
    start=1
    end=n-2
    while(start<=end):
        mid=int((start+end)/2) 
        if arr[mid]!=arr[mid-1] and arr[mid]!=arr[mid+1]:
            return arr[mid]
        if (arr[mid]==arr[mid-1] and mid%2==0) or (arr[mid]==arr[mid+1] and mid%2==1):
            end=mid-1
        else:
            start=mid+1

